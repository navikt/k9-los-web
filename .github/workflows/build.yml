name: Bygg og deploy test
on:
  push:
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENCE'
      - 'deploy/k9-los-oidc-auth-proxy-dev.yml'
      - 'deploy/k9-los-oidc-auth-proxy-redis.yml'
      - 'deploy/k9-los-oidc-auth-proxy-redis-exporter.yml'
    branches:
      - master

env:
  IMAGE_BASE_CR: ghcr.io/${{ github.repository }}
  CLUSTER: dev-fss
  NAMESPACE: default
  
jobs:
  build-og-deploy-master:
    name: Build og Deploy til Dev
    runs-on: ubuntu-latest
    steps:
      - name: Hente kode
        uses: actions/checkout@v2
      - name: Sette opp Node
        uses: actions/setup-node@v2.4.0
        with:
          node-version: 12.x
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Installere dependencies
        run: yarn install --ignore-optional --no-progress --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Tester og linting
        run: yarn test && yarn less:lint
      - name: Bygge dist
        run: yarn build
      - name: Sette Docker-navn og -tag
        run: |
          echo "TAG=${TAG}$(date +"%Y%m%d%H%M%S")-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      - name: Bygg og laste opp docker-image
        run: |
          docker pull node:alpine
          docker build --tag ${IMAGE_BASE_CR}:${TAG} --tag ${IMAGE_BASE_CR}:latest .
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u "x-access-token" --password-stdin ghcr.io
          docker push ${IMAGE_BASE_CR} --all-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lukk gamle issues
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });
      - name: Opprett deployment issue
        id: createdeployissue
        if: success()
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.create( {
              owner: context.issue.owner,
              repo: context.issue.repo,
              labels: ['deployment'],
              body: 'Kommenter enten "/promote dev-fss default" eller "/promote prod-fss default"',
              title: 'Deploy av ${{ env.TAG }}'})
            .then(response => {
                    core.setOutput('number', response.data.number);
             });

      - name: Trigg deploy til dev-fss
        if: success()
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GH_ACCESS_TOKEN}}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ steps.createdeployissue.outputs.number }} }
            github.issues.createComment({...issue,
                                    title: 'Deploy av ${{ env.TAG }}',
                                    body: '/promote ${{ env.CLUSTER }} ${{ env.NAMESPACE }}'})



